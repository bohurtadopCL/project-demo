const DEBUG = 'DEBUG',
  INFO = 'INFO',
  WARNING = 'WARNING',
  ERROR = 'ERROR';
const self = {
  debug: function (args) {
    self._log(arguments, DEBUG)
  },
  log: function (args) {
    self._log(arguments, INFO)
  },
  information: function (args) {
    self._log(arguments, INFO)
  },
  info: function (args) {
    self._log(arguments, INFO)
  },
  warning: function (args) {
    self._log(arguments, WARNING)
  },
  warn: function (args) {
    self._log(arguments, WARNING)
  },
  error: function (args) {
    self._log(arguments, ERROR)
  },
  err: function (args) {
    self._log(arguments, ERROR)
  },
  _log: function (msgs, level) {
    var objMsg = {};
    if (msgs.length === 1) {
      var objMsg = msgs[0];
      if (objMsg instanceof Error) {
        objMsg = {
          ...objMsg,
          message: objMsg.message,
          stack: objMsg.stack
        };
      }
      // check if this is a Json
      if (typeof objMsg === 'object') {
        objMsg = {
          level,
          ...objMsg
        }
        objMsg = JSON.stringify(objMsg);
      } else {
        objMsg = JSON.stringify({
          level,
          message: objMsg
        });
      }
    } else {
      for (let i = 0; i < msgs.length; i++) {
        let msg = msgs[i];
        // check if this message is about an Error
        if (msg instanceof Error) {
          msg = {
            ...msg,
            message: msg.message,
            stack: msg.stack
          };
        }
        objMsg['arg' + (i + 1)] = msg;
      }

      objMsg = JSON.stringify({
        level,
        ...objMsg
      });
    }


    // send to stdout
    switch (level) {
      case ERROR: console.error(objMsg); break;
      case WARNING: console.warn(objMsg); break;
      case INFO: console.info(objMsg); break;
      case DEBUG: console.log(objMsg); break;
      default: console.log(objMsg); break;
    }
  }
};

module.exports = self;
