const logger = require("./index");

const defaultLevel = "Info";

describe("Logger library tests", () => {
  beforeEach(() => {
    console.log = jest.fn();
    console.warn = jest.fn();
    console.info = jest.fn();
    console.error = jest.fn();
  });

  describe("Tests for the '_log' function", () => {
    it("Should log a simple string message", () => {
      const receivedData = ["This is a custom message"];
      const expectedData = JSON.stringify({
        level: defaultLevel,
        message: receivedData[0],
      });
      logger._log(receivedData, defaultLevel);
      expect(console.log).toHaveBeenCalledWith(expectedData);
    });
    it("Should log a json object", () => {
      const receivedData = [{ x: 1, y: 2 }];
      const expectedData = JSON.stringify({
        level: defaultLevel,
        ...receivedData[0],
      });
      logger._log(receivedData, defaultLevel);
      expect(console.log).toHaveBeenCalledWith(expectedData);
    });
    it("Should log an instance of an Error class with all its properties", () => {
      const error = [Error("My error 1")];
      const expectedData = JSON.stringify({
        level: "Error",
        code: error[0].code,
        message: error[0].message,
        stack: error[0].stack,
      });
      logger._log(error, "Error");
      expect(console.log).toHaveBeenCalledWith(expectedData);
    });
    it("Should log with the right level", () => {
      const level = "WARNING";
      const message = ["This is a custom message"];
      const expectedData = JSON.stringify({
        level,
        message: message[0],
      });
      logger._log(message, "WARNING");
      expect(console.warn).toHaveBeenCalledWith(expectedData);
    });
    it("Should log MULTIPLE ARGUMENTS properly", () => {
      const level = "WARNING";
      const message = ["This is a custom message", { x: 1, y: 2 }, Error("My error 1")];
      const expectedData = JSON.stringify({
        level,
        arg1: message[0],
        arg2: message[1],
        arg3: {
          code: message[2].code,
          message: message[2].message,
          stack: message[2].stack,
        }
      });
      logger._log(message, "WARNING");
      expect(console.warn).toHaveBeenCalledWith(expectedData);
    });
  });

  describe("Tests for logs with 'INFO' level", () => {
    it("Should call the '_log' function from the 'information' function", () => {
      const logSpy = jest.spyOn(logger, "_log");
      logger.information("This is a custom message");
      expect(logSpy).toHaveBeenCalled();
    });
    it("Should call the '_log' function from the 'info' function", () => {
      const logSpy = jest.spyOn(logger, "_log");
      logger.info("This is a custom message");
      expect(logSpy).toHaveBeenCalled();
    });
    it("Should call the '_log' function from the 'log' function", () => {
      const logSpy = jest.spyOn(logger, "_log");
      logger.log("This is a custom message");
      expect(logSpy).toHaveBeenCalled();
    });

    it("Should call the 'console.info' function from the 'information' function", () => {
      logger.information("This is a custom message");
      expect(console.info).toHaveBeenCalled();
    });
    it("Should call the 'console.info' function from the 'info' function", () => {
      logger.info("This is a custom message");
      expect(console.info).toHaveBeenCalled();
    });
    it("Should call the 'console.info' function from the 'log' function", () => {
      logger.log("This is a custom message");
      expect(console.info).toHaveBeenCalled();
    });
  });

  describe("Tests for logs with 'WARNING' level", () => {
    it("Should call the '_log' function from the 'warning' function", () => {
      const logSpy = jest.spyOn(logger, "_log");
      logger.warning("This is a custom message");
      expect(logSpy).toHaveBeenCalled();
    });
    it("Should call the '_log' function from the 'warn' function", () => {
      const logSpy = jest.spyOn(logger, "_log");
      logger.warn("This is a custom message");
      expect(logSpy).toHaveBeenCalled();
    });

    it("Should call the 'console.warn' function from the 'warning' function", () => {
      logger.warning("This is a custom message");
      expect(console.warn).toHaveBeenCalled();
    });
    it("Should call the 'console.warn' function from the 'warn' function", () => {
      logger.warn("This is a custom message");
      expect(console.warn).toHaveBeenCalled();
    });
  });

  describe("Tests for logs with 'ERROR' level", () => {
    it("Should call the '_log' function from the 'error' function", () => {
      const logSpy = jest.spyOn(logger, "_log");
      logger.error("This is a custom message");
      expect(logSpy).toHaveBeenCalled();
    });

    it("Should call the 'console.error' function from the 'error' function", () => {
      logger.error("This is a custom message");
      expect(console.error).toHaveBeenCalled();
    });
  });

  describe("Tests for logs with 'DEBUG' level", () => {
    it("Should call the '_log' function from the 'debug' function", () => {
      const logSpy = jest.spyOn(logger, "_log");
      logger.debug("This is a custom message");
      expect(logSpy).toHaveBeenCalled();
    });

    it("Should call the 'console.log' function from the 'debug' function", () => {
      logger.debug("This is a custom message");
      expect(console.log).toHaveBeenCalled();
    });
  });
});
