const Joi = require('joi');
const fs = require('fs');
const redis = require('redis');
const bluebird = require('bluebird');
const logger = require('@condor-labs/logger');

bluebird.promisifyAll(redis.RedisClient.prototype);
bluebird.promisifyAll(redis.Multi.prototype);

const self = {
    _settings: null,
    _client: undefined,
    _errorMsgInvalidSetting: 'INVALID_SETTINGS',
    _errorMsgUndefinedSetting: 'SETTINGS_NOT_DEFINED',
    _schema: {
        prefix: Joi.string().default(null),
        host: Joi.string().default('127.0.0.1').required(),
        port: Joi.number().default(6379),
        password: Joi.string().default(null).allow(null).allow(''),
        ssl: Joi.boolean().default(false),
        sslKeyPath: Joi.string().when('ssl', {
            is: true,
            then: Joi.string().required()
        }),
        sslCertPath: Joi.string().when('ssl', {
            is: true,
            then: Joi.string().required()
        }),
        sslCaPath: Joi.string().when('ssl', {
            is: true,
            then: Joi.string().required()
        })
    },
    _setSettings: settings => {
        //Validate the settings
        if (!self._validateSettings(settings)) {
            throw new Error(self._errorMsgInvalidSetting);
        }
        self._settings = settings;
    },
    _validateSettings: settings => {
        if (!settings) {
            logger.error(self._errorMsgUndefinedSetting);
            return false;
        }

        const { error, value } = Joi.validate(settings, self._schema);

        if (error === null) {
            return true;
        } else {
            logger.error(`${error} - ${value}`);
            return false;
        }
    },
    getClient: async (forceReconnect = false) => {
        if (forceReconnect || !self._client || !self._client.connected) {
            if (!self._validateSettings(self._settings)) {
                throw new Error(self._errorMsgInvalidSetting);
            }

            if (self._settings.ssl === true) {
                self._settings.tls = {
                    key: fs.readFileSync(self._settings.sslKeyPath, { 'encoding': 'ascii' }),
                    cert: fs.readFileSync(self._settings.sslCertPath, { 'encoding': 'ascii' }),
                    ca: [fs.readFileSync(self._settings.sslCaPath, { 'encoding': 'ascii' })]
                };
            }

            self._client = await redis.createClient(self._settings);
            self._client.on("error", (err) => {
                logger.error(`Error ocurred connecting to Redis <br/> Stack: ${err}`);
            });
        }
        return self._client;
    }
};

module.exports = self;